{
  "swagger": "2.0",
  "info": {
    "title": "Git",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "4.1"
  },
  "host": "fabrikam-fiber-inc.visualstudio.com",
  "x-ms-parameterized-host": {
    "hostTemplate": "{accountName}.visualstudio.com",
    "parameters": [
      {
        "name": "accountName",
        "description": "The name of the Visual Studio Team Services account.",
        "required": true,
        "type": "string",
        "in": "path"
      }
    ]
  },
  "x-ms-vss-area": "Git",
  "x-ms-vss-resource-area-id": "4e080c62-fa21-4fbc-8fef-2a10a2b38049",
  "basePath": "/",
  "tags": [
    {
      "name": "annotatedTags"
    },
    {
      "name": "Blobs"
    },
    {
      "name": "BranchStats"
    },
    {
      "name": "Changes"
    },
    {
      "name": "CherryPicks"
    },
    {
      "name": "CommitDiffs"
    },
    {
      "name": "Commits"
    },
    {
      "name": "CommitsBatch"
    },
    {
      "name": "DeletedRepositories"
    },
    {
      "name": "forks"
    },
    {
      "name": "forkSyncRequests"
    },
    {
      "name": "ImportRequests"
    },
    {
      "name": "Items"
    },
    {
      "name": "ItemsBatch"
    },
    {
      "name": "PullRequestAttachments"
    },
    {
      "name": "PullRequestCommentLikes"
    },
    {
      "name": "PullRequestCommits"
    },
    {
      "name": "PullRequestIterationChanges"
    },
    {
      "name": "PullRequestIterations"
    },
    {
      "name": "PullRequestIterationStatuses"
    },
    {
      "name": "PullRequestLabels"
    },
    {
      "name": "PullRequestQuery"
    },
    {
      "name": "PullRequestReviewers"
    },
    {
      "name": "PullRequests"
    },
    {
      "name": "PullRequestShare"
    },
    {
      "name": "PullRequestStatuses"
    },
    {
      "name": "PullRequestThreadComments"
    },
    {
      "name": "PullRequestThreads"
    },
    {
      "name": "PullRequestWorkItems"
    },
    {
      "name": "pushes"
    },
    {
      "name": "refs"
    },
    {
      "name": "refsFavorites"
    },
    {
      "name": "Repositories"
    },
    {
      "name": "Reverts"
    },
    {
      "name": "Statuses"
    },
    {
      "name": "Suggestions"
    },
    {
      "name": "Trees"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses": {
      "get": {
        "tags": [
          "PullRequestIterationStatuses"
        ],
        "x-ms-vss-resource": "pullRequestIterationStatuses",
        "x-ms-vss-method": "GetPullRequestIterationStatuses",
        "description": "Get all the statuses associated with a pull request iteration.",
        "operationId": "PullRequestIterationStatuses_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository the pull request belongs to.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GitPullRequestStatus"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.code_status"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "#/definitions/GET_git_pullRequestStatuses_iterationStatuses"
          }
        },
        "x-internal-toc-name": "Pull Request Iteration List List List t"
      }
    }
  },
  "definitions": {
    "AssociatedWorkItem": {
      "description": "",
      "type": "object",
      "properties": {
        "assignedTo": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "description": "REST url",
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        },
        "workItemType": {
          "type": "string"
        }
      }
    },
    "AsyncGitOperationNotification": {
      "description": "",
      "type": "object",
      "properties": {
        "operationId": {
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AsyncRefOperationCommitLevelEventNotification": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AsyncGitOperationNotification"
        }
      ],
      "properties": {
        "commitId": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "AsyncRefOperationCompletedNotification": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AsyncGitOperationNotification"
        }
      ],
      "properties": {
        "newRefName": {
          "type": "string"
        }
      }
    },
    "AsyncRefOperationConflictNotification": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AsyncRefOperationCommitLevelEventNotification"
        }
      ],
      "properties": {}
    },
    "AsyncRefOperationGeneralFailureNotification": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AsyncGitOperationNotification"
        }
      ],
      "properties": {}
    },
    "AsyncRefOperationProgressNotification": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AsyncRefOperationCommitLevelEventNotification"
        }
      ],
      "properties": {
        "progress": {
          "readOnly": true,
          "type": "number",
          "format": "double"
        }
      }
    },
    "AsyncRefOperationTimeoutNotification": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AsyncGitOperationNotification"
        }
      ],
      "properties": {}
    },
    "Attachment": {
      "description": "Meta data for a file attached to an artifact",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "description": "The person that uploaded this attachment",
          "$ref": "#/definitions/IdentityRef"
        },
        "contentHash": {
          "description": "Content hash of on-disk representation of file content. Its calculated by the server by using SHA1 hash function.",
          "type": "string"
        },
        "createdDate": {
          "description": "The time the attachment was uploaded",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the attachment, can be null.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the attachment, can't be null or empty.",
          "type": "string"
        },
        "id": {
          "description": "Id of the code review attachment",
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "url": {
          "description": "The url to download the content of the attachment",
          "type": "string"
        }
      }
    },
    "Change": {
      "description": "",
      "type": "object",
      "properties": {
        "changeType": {
          "enum": [
            "none",
            "add",
            "edit",
            "encoding",
            "rename",
            "delete",
            "undelete",
            "branch",
            "merge",
            "lock",
            "rollback",
            "sourceRename",
            "targetRename",
            "property",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlChangeType"
          }
        },
        "item": {
          "type": "string",
          "format": "T"
        },
        "newContent": {
          "$ref": "#/definitions/ItemContent"
        },
        "sourceServerItem": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ChangeCountDictionary": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        }
      ],
      "properties": {}
    },
    "ChangeList": {
      "description": "",
      "type": "object",
      "properties": {
        "allChangesIncluded": {
          "type": "boolean"
        },
        "changeCounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "Change"
          }
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckinNote"
          }
        },
        "owner": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerId": {
          "type": "string",
          "format": "uuid"
        },
        "sortDate": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ChangeListSearchCriteria": {
      "description": "Criteria used in a search for change lists",
      "type": "object",
      "properties": {
        "compareVersion": {
          "description": "If provided, a version descriptor to compare against base",
          "type": "string"
        },
        "excludeDeletes": {
          "description": "If true, don't include delete history entries",
          "type": "boolean"
        },
        "followRenames": {
          "description": "Whether or not to follow renames for the given item being queried",
          "type": "boolean"
        },
        "fromDate": {
          "description": "If provided, only include history entries created after this date (string)",
          "type": "string"
        },
        "fromVersion": {
          "description": "If provided, a version descriptor for the earliest change list to include",
          "type": "string"
        },
        "itemPath": {
          "description": "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.",
          "type": "string"
        },
        "itemPaths": {
          "description": "List of item paths to search under. If this member is used then itemPath will be ignored.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "itemVersion": {
          "description": "Version of the items to search",
          "type": "string"
        },
        "skip": {
          "description": "Number of results to skip (used when clicking more...)",
          "type": "integer",
          "format": "int32"
        },
        "toDate": {
          "description": "If provided, only include history entries created before this date (string)",
          "type": "string"
        },
        "top": {
          "description": "If provided, the maximum number of history entries to return",
          "type": "integer",
          "format": "int32"
        },
        "toVersion": {
          "description": "If provided, a version descriptor for the latest change list to include",
          "type": "string"
        },
        "user": {
          "description": "Alias or display name of user who made the changes",
          "type": "string"
        }
      }
    },
    "CheckinNote": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Comment": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "description": "The author of the pull request comment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "commentType": {
          "description": "Determines what kind of comment when it was created.",
          "enum": [
            "unknown",
            "text",
            "codeChange",
            "system"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.CommentType"
          }
        },
        "content": {
          "description": "The comment's content.",
          "type": "string"
        },
        "id": {
          "description": "The pull request comment id. It always starts from 1.",
          "type": "integer",
          "format": "int16"
        },
        "isDeleted": {
          "description": "Marks if this comment was soft-deleted.",
          "type": "boolean"
        },
        "lastContentUpdatedDate": {
          "description": "The date a comment content was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "lastUpdatedDate": {
          "description": "The date a comment was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "parentCommentId": {
          "description": "The pull request comment id of the parent comment. This is used for replies",
          "type": "integer",
          "format": "int16"
        },
        "publishedDate": {
          "description": "The date a comment was first published.",
          "type": "string",
          "format": "date-time"
        },
        "usersLiked": {
          "description": "A list of the users who've liked this comment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityRef"
          }
        }
      }
    },
    "CommentIterationContext": {
      "description": "Iteration context is used to specify comparing iteration Ids when a comment thread is added while comparing 2 iterations.",
      "type": "object",
      "properties": {
        "firstComparingIteration": {
          "description": "First comparing iteration Id. Minimum value is 1.",
          "type": "integer",
          "format": "int16"
        },
        "secondComparingIteration": {
          "description": "Second comparing iteration Id. Minimum value is 1.",
          "type": "integer",
          "format": "int16"
        }
      }
    },
    "CommentPosition": {
      "description": "",
      "type": "object",
      "properties": {
        "line": {
          "description": "Position line starting with one.",
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "description": "Position offset starting with zero.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CommentThread": {
      "description": "Represents a given comment thread",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "comments": {
          "description": "A list of the comments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "id": {
          "description": "The comment thread id.",
          "type": "integer",
          "format": "int32"
        },
        "isDeleted": {
          "description": "Specify if the thread is deleted which happens when all comments are deleted",
          "type": "boolean"
        },
        "lastUpdatedDate": {
          "description": "The time this thread was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "properties": {
          "description": "A list of (optional) thread properties.",
          "$ref": "#/definitions/PropertiesCollection"
        },
        "publishedDate": {
          "description": "The time this thread was published.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the comment thread.",
          "enum": [
            "unknown",
            "active",
            "fixed",
            "wontFix",
            "closed",
            "byDesign",
            "pending"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.CommentThreadStatus"
          }
        },
        "threadContext": {
          "description": "Specify thread context such as position in left/right file.",
          "$ref": "#/definitions/CommentThreadContext"
        }
      }
    },
    "CommentThreadContext": {
      "description": "",
      "type": "object",
      "properties": {
        "filePath": {
          "description": "File path relative to the root of the repository. It's up to the client to use any path format.",
          "type": "string"
        },
        "leftFileEnd": {
          "description": "Position of last character of the comment in left file.",
          "$ref": "#/definitions/CommentPosition"
        },
        "leftFileStart": {
          "description": "Position of first character of the comment in left file.",
          "$ref": "#/definitions/CommentPosition"
        },
        "rightFileEnd": {
          "description": "Position of last character of the comment in right file.",
          "$ref": "#/definitions/CommentPosition"
        },
        "rightFileStart": {
          "description": "Position of first character of the comment in right file.",
          "$ref": "#/definitions/CommentPosition"
        }
      }
    },
    "CommentTrackingCriteria": {
      "description": "Criteria to decide if and how a thread should be tracked",
      "type": "object",
      "properties": {
        "firstComparingIteration": {
          "description": "The first comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
          "type": "integer",
          "format": "int32"
        },
        "origFilePath": {
          "description": "Original filepath the comment was on before tracking",
          "type": "string"
        },
        "origLeftFileEnd": {
          "description": "Original position of last character of the comment in left file.",
          "$ref": "#/definitions/CommentPosition"
        },
        "origLeftFileStart": {
          "description": "Original position of first character of the comment in left file.",
          "$ref": "#/definitions/CommentPosition"
        },
        "origRightFileEnd": {
          "description": "Original position of last character of the comment in right file.",
          "$ref": "#/definitions/CommentPosition"
        },
        "origRightFileStart": {
          "description": "Original position of first character of the comment in right file.",
          "$ref": "#/definitions/CommentPosition"
        },
        "secondComparingIteration": {
          "description": "The second comparing iteration being viewed. Threads will be tracked if this is greater than 0.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FileContentMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "encoding": {
          "type": "integer",
          "format": "int32"
        },
        "extension": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "isBinary": {
          "type": "boolean"
        },
        "isImage": {
          "type": "boolean"
        },
        "vsLink": {
          "type": "string"
        }
      }
    },
    "GitAnnotatedTag": {
      "description": "",
      "type": "object",
      "properties": {
        "message": {
          "description": "Tagging Message",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "taggedBy": {
          "description": "User name, Email and date of tagging",
          "$ref": "#/definitions/GitUserDate"
        },
        "taggedObject": {
          "description": "Tagged git object",
          "$ref": "#/definitions/GitObject"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitAsyncRefOperation": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "detailedStatus": {
          "$ref": "#/definitions/GitAsyncRefOperationDetail"
        },
        "parameters": {
          "$ref": "#/definitions/GitAsyncRefOperationParameters"
        },
        "status": {
          "enum": [
            "queued",
            "inProgress",
            "completed",
            "failed",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncOperationStatus"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitAsyncRefOperationDetail": {
      "description": "",
      "type": "object",
      "properties": {
        "conflict": {
          "type": "boolean"
        },
        "currentCommitId": {
          "type": "string"
        },
        "failureMessage": {
          "type": "string"
        },
        "progress": {
          "type": "number",
          "format": "double"
        },
        "status": {
          "enum": [
            "none",
            "invalidRefName",
            "refNameConflict",
            "createBranchPermissionRequired",
            "writePermissionRequired",
            "targetBranchDeleted",
            "gitObjectTooLarge",
            "operationIndentityNotFound",
            "asyncOperationNotFound",
            "other"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationFailureStatus"
          }
        },
        "timedout": {
          "type": "boolean"
        }
      }
    },
    "GitAsyncRefOperationParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "generatedRefName": {
          "type": "string"
        },
        "ontoRefName": {
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/GitRepository"
        },
        "source": {
          "$ref": "#/definitions/GitAsyncRefOperationSource"
        }
      }
    },
    "GitAsyncRefOperationSource": {
      "description": "",
      "type": "object",
      "properties": {
        "commitList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitCommitRef"
          }
        },
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GitBaseVersionDescriptor": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitVersionDescriptor"
        }
      ],
      "properties": {
        "baseVersion": {
          "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
          "type": "string"
        },
        "baseVersionOptions": {
          "description": "Version options - Specify additional modifiers to version (e.g Previous)",
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "baseVersionType": {
          "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
          "enum": [
            "branch",
            "tag",
            "commit"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "GitBlobRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "objectId": {
          "description": "SHA1 hash of git object",
          "type": "string"
        },
        "size": {
          "description": "Size of blob content (in bytes)",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitBranchStats": {
      "description": "",
      "type": "object",
      "properties": {
        "aheadCount": {
          "type": "integer",
          "format": "int32"
        },
        "behindCount": {
          "type": "integer",
          "format": "int32"
        },
        "commit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "isBaseVersion": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "GitChange": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "Change"
        }
      ],
      "properties": {
        "changeId": {
          "description": "Id of the change within the group.  For example, within the iteration",
          "type": "integer",
          "format": "int32"
        },
        "newContentTemplate": {
          "description": "New Content template to be used",
          "$ref": "#/definitions/GitTemplate"
        },
        "originalPath": {
          "description": "Original path of item if different from current path",
          "type": "string"
        }
      }
    },
    "GitCherryPick": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitAsyncRefOperation"
        }
      ],
      "properties": {
        "cherryPickId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GitCommit": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitCommitRef"
        }
      ],
      "properties": {
        "push": {
          "$ref": "#/definitions/GitPushRef"
        },
        "treeId": {
          "type": "string"
        }
      }
    },
    "GitCommitChanges": {
      "description": "",
      "type": "object",
      "properties": {
        "changeCounts": {
          "$ref": "#/definitions/ChangeCountDictionary"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitChange"
          }
        }
      }
    },
    "GitCommitDiffs": {
      "description": "",
      "type": "object",
      "properties": {
        "aheadCount": {
          "type": "integer",
          "format": "int32"
        },
        "allChangesIncluded": {
          "type": "boolean"
        },
        "baseCommit": {
          "type": "string"
        },
        "behindCount": {
          "type": "integer",
          "format": "int32"
        },
        "changeCounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitChange"
          }
        },
        "commonCommit": {
          "type": "string"
        },
        "targetCommit": {
          "type": "string"
        }
      }
    },
    "GitCommitRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "$ref": "#/definitions/GitUserDate"
        },
        "changeCounts": {
          "$ref": "#/definitions/ChangeCountDictionary"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitChange"
          }
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "commitId": {
          "type": "string"
        },
        "committer": {
          "$ref": "#/definitions/GitUserDate"
        },
        "parents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remoteUrl": {
          "type": "string"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitStatus"
          }
        },
        "url": {
          "type": "string"
        },
        "workItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        }
      }
    },
    "GitCommitToCreate": {
      "description": "",
      "type": "object",
      "properties": {
        "baseRef": {
          "$ref": "#/definitions/GitRef"
        },
        "comment": {
          "type": "string"
        },
        "pathActions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitPathAction"
          }
        }
      }
    },
    "GitConflict": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "conflictId": {
          "type": "integer",
          "format": "int32"
        },
        "conflictPath": {
          "type": "string"
        },
        "conflictType": {
          "enum": [
            "none",
            "addAdd",
            "addRename",
            "deleteEdit",
            "deleteRename",
            "directoryFile",
            "directoryChild",
            "editDelete",
            "editEdit",
            "fileDirectory",
            "rename1to2",
            "rename2to1",
            "renameAdd",
            "renameDelete",
            "renameRename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictType"
          }
        },
        "mergeBaseCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "mergeOrigin": {
          "$ref": "#/definitions/GitMergeOriginRef"
        },
        "mergeSourceCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "mergeTargetCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "resolutionError": {
          "enum": [
            "none",
            "mergeContentNotFound",
            "pathInUse",
            "invalidPath",
            "unknownAction",
            "unknownMergeType",
            "otherError"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionError"
          }
        },
        "resolutionStatus": {
          "enum": [
            "unresolved",
            "partiallyResolved",
            "resolved"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionStatus"
          }
        },
        "resolvedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "resolvedDate": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitConflictAddAdd": {
      "description": "Data object for AddAdd conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/GitResolutionMergeContent"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        }
      }
    },
    "GitConflictAddRename": {
      "description": "Data object for RenameAdd conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionPathConflict"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetOriginalPath": {
          "type": "string"
        }
      }
    },
    "GitConflictDeleteEdit": {
      "description": "Data object for EditDelete conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionPickOneAction"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        }
      }
    },
    "GitConflictDeleteRename": {
      "description": "Data object for RenameDelete conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionPickOneAction"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetNewPath": {
          "type": "string"
        }
      }
    },
    "GitConflictDirectoryFile": {
      "description": "Data object for FileDirectory conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/GitResolutionPathConflict"
        },
        "sourceTree": {
          "$ref": "#/definitions/GitTreeRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        }
      }
    },
    "GitConflictEditDelete": {
      "description": "Data object for DeleteEdit conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionPickOneAction"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        }
      }
    },
    "GitConflictEditEdit": {
      "description": "Data object for EditEdit conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionMergeContent"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        }
      }
    },
    "GitConflictFileDirectory": {
      "description": "Data object for DirectoryFile conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/GitResolutionPathConflict"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetTree": {
          "$ref": "#/definitions/GitTreeRef"
        }
      }
    },
    "GitConflictRename1to2": {
      "description": "Data object for Rename1to2 conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionRename1to2"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "sourceNewPath": {
          "type": "string"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetNewPath": {
          "type": "string"
        }
      }
    },
    "GitConflictRename2to1": {
      "description": "Data object for Rename2to1 conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "resolution": {
          "$ref": "#/definitions/GitResolutionPathConflict"
        },
        "sourceNewBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "sourceOriginalBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "sourceOriginalPath": {
          "type": "string"
        },
        "targetNewBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetOriginalBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetOriginalPath": {
          "type": "string"
        }
      }
    },
    "GitConflictRenameAdd": {
      "description": "Data object for AddRename conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionPathConflict"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "sourceOriginalPath": {
          "type": "string"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        }
      }
    },
    "GitConflictRenameDelete": {
      "description": "Data object for DeleteRename conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionPickOneAction"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "sourceNewPath": {
          "type": "string"
        }
      }
    },
    "GitConflictRenameRename": {
      "description": "Data object for RenameRename conflict",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitConflict"
        }
      ],
      "properties": {
        "baseBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "originalPath": {
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/GitResolutionMergeContent"
        },
        "sourceBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "targetBlob": {
          "$ref": "#/definitions/GitBlobRef"
        }
      }
    },
    "GitConflictUpdateResult": {
      "description": "",
      "type": "object",
      "properties": {
        "conflictId": {
          "description": "Conflict ID that was provided by input",
          "type": "integer",
          "format": "int32"
        },
        "customMessage": {
          "description": "Reason for failing",
          "type": "string"
        },
        "updatedConflict": {
          "description": "New state of the conflict after updating",
          "$ref": "#/definitions/GitConflict"
        },
        "updateStatus": {
          "description": "Status of the update on the server",
          "enum": [
            "succeeded",
            "badRequest",
            "invalidResolution",
            "unsupportedConflictType",
            "notFound"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateStatus"
          }
        }
      }
    },
    "GitDeletedRepository": {
      "description": "",
      "type": "object",
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "deletedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "deletedDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/TeamProjectReference"
        }
      }
    },
    "GitFilePathsCollection": {
      "description": "",
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GitForkOperationStatusDetail": {
      "description": "Status information about a requested fork operation.",
      "type": "object",
      "properties": {
        "allSteps": {
          "description": "All valid steps for the forking process",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currentStep": {
          "description": "Index into AllSteps for the current step",
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "description": "Error message if the operation failed.",
          "type": "string"
        }
      }
    },
    "GitForkRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitRef"
        }
      ],
      "properties": {
        "repository": {
          "$ref": "#/definitions/GitRepository"
        }
      }
    },
    "GitForkRelationship": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "collection": {
          "description": "Team Project Collection where this Fork resides",
          "$ref": "#/definitions/TeamProjectCollectionReference"
        },
        "project": {
          "description": "Team Project where this Fork resides",
          "$ref": "#/definitions/TeamProjectReference"
        },
        "relationship": {
          "description": "Relationship of this fork to the current repository context",
          "enum": [
            "parent",
            "child"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.ForkRelationship"
          }
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        },
        "repositoryName": {
          "type": "string"
        }
      }
    },
    "GitForkSyncRequest": {
      "description": "Request to sync data between two forks.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Collection of related links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "detailedStatus": {
          "$ref": "#/definitions/GitForkOperationStatusDetail"
        },
        "operationId": {
          "description": "Unique identifier for the operation.",
          "type": "integer",
          "format": "int32"
        },
        "source": {
          "description": "Fully-qualified identifier for the source repository.",
          "$ref": "#/definitions/GlobalGitRepositoryKey"
        },
        "sourceToTargetRefs": {
          "description": "If supplied, the set of ref mappings to use when performing a \"sync\" or create. If missing, all refs will be synchronized.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceToTargetRef"
          }
        },
        "status": {
          "enum": [
            "queued",
            "inProgress",
            "completed",
            "failed",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncOperationStatus"
          }
        }
      }
    },
    "GitForkSyncRequestParameters": {
      "description": "Parameters for creating a fork request",
      "type": "object",
      "properties": {
        "source": {
          "description": "Fully-qualified identifier for the source repository.",
          "$ref": "#/definitions/GlobalGitRepositoryKey"
        },
        "sourceToTargetRefs": {
          "description": "If supplied, the set of ref mappings to use when performing a \"sync\" or create. If missing, all refs will be synchronized.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceToTargetRef"
          }
        }
      }
    },
    "GitImportFailedEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "sourceRepositoryName": {
          "type": "string"
        },
        "targetRepository": {
          "$ref": "#/definitions/GitRepository"
        }
      }
    },
    "GitImportGitSource": {
      "description": "Parameter for creating a git import request when source is Git version control",
      "type": "object",
      "properties": {
        "overwrite": {
          "description": "Tells if this is a sync request or not",
          "type": "boolean"
        },
        "url": {
          "description": "Url for the source repo",
          "type": "string"
        }
      }
    },
    "GitImportRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "detailedStatus": {
          "$ref": "#/definitions/GitImportStatusDetail"
        },
        "importRequestId": {
          "type": "integer",
          "format": "int32"
        },
        "parameters": {
          "description": "Parameters for creating an import request",
          "$ref": "#/definitions/GitImportRequestParameters"
        },
        "repository": {
          "$ref": "#/definitions/GitRepository"
        },
        "status": {
          "enum": [
            "queued",
            "inProgress",
            "completed",
            "failed",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncOperationStatus"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitImportRequestParameters": {
      "description": "Parameters for creating an import request",
      "type": "object",
      "properties": {
        "deleteServiceEndpointAfterImportIsDone": {
          "description": "Option to delete service endpoint when import is done",
          "type": "boolean"
        },
        "gitSource": {
          "description": "Source for importing git repository",
          "$ref": "#/definitions/GitImportGitSource"
        },
        "serviceEndpointId": {
          "description": "Service Endpoint for connection to external endpoint",
          "type": "string",
          "format": "uuid"
        },
        "tfvcSource": {
          "description": "Source for importing tfvc repository",
          "$ref": "#/definitions/GitImportTfvcSource"
        }
      }
    },
    "GitImportStatusDetail": {
      "description": "",
      "type": "object",
      "properties": {
        "allSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "currentStep": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "GitImportSucceededEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "sourceRepositoryName": {
          "type": "string"
        },
        "targetRepository": {
          "$ref": "#/definitions/GitRepository"
        }
      }
    },
    "GitImportTfvcSource": {
      "description": "Parameter for creating a git import request when source is tfvc version control",
      "type": "object",
      "properties": {
        "importHistory": {
          "description": "Set true to import History, false otherwise",
          "type": "boolean"
        },
        "importHistoryDurationInDays": {
          "description": "Get history for last n days (max allowed value is 180 days)",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
          "type": "string"
        }
      }
    },
    "GitItem": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ItemModel"
        }
      ],
      "properties": {
        "commitId": {
          "description": "SHA1 of commit item was fetched at",
          "type": "string"
        },
        "gitObjectType": {
          "description": "Type of object (Commit, Tree, Blob, Tag, ...)",
          "enum": [
            "bad",
            "commit",
            "tree",
            "blob",
            "tag",
            "ext2",
            "ofsDelta",
            "refDelta"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType"
          }
        },
        "latestProcessedChange": {
          "description": "Shallow ref to commit that last changed this item Only populated if latestProcessedChange is requested May not be accurate if latest change is not yet cached",
          "$ref": "#/definitions/GitCommitRef"
        },
        "objectId": {
          "description": "Git object id",
          "type": "string"
        },
        "originalObjectId": {
          "description": "Git object id",
          "type": "string"
        }
      }
    },
    "GitItemDescriptor": {
      "description": "",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to item",
          "readOnly": true,
          "type": "string"
        },
        "recursionLevel": {
          "description": "Specifies whether to include children (OneLevel), all descendants (Full), or None",
          "enum": [
            "none",
            "oneLevel",
            "oneLevelPlusNestedEmptyFolders",
            "full"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType"
          }
        },
        "version": {
          "description": "Version string (interpretation based on VersionType defined in subclass",
          "readOnly": true,
          "type": "string"
        },
        "versionOptions": {
          "description": "Version modifiers (e.g. previous)",
          "readOnly": true,
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "versionType": {
          "description": "How to interpret version (branch,tag,commit)",
          "readOnly": true,
          "enum": [
            "branch",
            "tag",
            "commit"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "GitItemRequestData": {
      "description": "",
      "type": "object",
      "properties": {
        "includeContentMetadata": {
          "description": "Whether to include metadata for all items",
          "readOnly": true,
          "type": "boolean"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemDescriptors": {
          "description": "Collection of items to fetch, including path, version, and recursion level",
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitItemDescriptor"
          }
        },
        "latestProcessedChange": {
          "description": "Whether to include shallow ref to commit that last changed each item",
          "readOnly": true,
          "type": "boolean"
        }
      }
    },
    "GitLastChangeItem": {
      "description": "",
      "type": "object",
      "properties": {
        "commitId": {
          "description": "Gets or sets the commit Id this item was modified most recently for the provided version.",
          "type": "string"
        },
        "path": {
          "description": "Gets or sets the path of the item.",
          "type": "string"
        }
      }
    },
    "GitLastChangeTreeItems": {
      "description": "",
      "type": "object",
      "properties": {
        "commits": {
          "description": "The list of commits referenced by Items, if they were requested.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitCommitRef"
          }
        },
        "items": {
          "description": "The last change of items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitLastChangeItem"
          }
        },
        "lastExploredTime": {
          "description": "The last explored time, in case the result is not comprehensive. Null otherwise.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GitMergeOriginRef": {
      "description": "",
      "type": "object",
      "properties": {
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GitObject": {
      "description": "",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "Git object id",
          "type": "string"
        },
        "objectType": {
          "description": "Type of object (Commit, Tree, Blob, Tag)",
          "enum": [
            "bad",
            "commit",
            "tree",
            "blob",
            "tag",
            "ext2",
            "ofsDelta",
            "refDelta"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType"
          }
        }
      }
    },
    "GitPathAction": {
      "description": "",
      "type": "object",
      "properties": {
        "action": {
          "enum": [
            "none",
            "edit",
            "delete",
            "add",
            "rename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitPathActions"
          }
        },
        "base64Content": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "rawTextContent": {
          "type": "string"
        },
        "targetPath": {
          "type": "string"
        }
      }
    },
    "GitPathToItemsCollection": {
      "description": "",
      "type": "object",
      "properties": {
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "array"
          }
        }
      }
    },
    "GitPullRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "artifactId": {
          "type": "string"
        },
        "autoCompleteSetBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "closedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "closedDate": {
          "type": "string",
          "format": "date-time"
        },
        "codeReviewId": {
          "type": "integer",
          "format": "int32"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitCommitRef"
          }
        },
        "completionOptions": {
          "$ref": "#/definitions/GitPullRequestCompletionOptions"
        },
        "completionQueueTime": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "forkSource": {
          "$ref": "#/definitions/GitForkRef"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebApiTagDefinition"
          }
        },
        "lastMergeCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "lastMergeSourceCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "lastMergeTargetCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "mergeFailureMessage": {
          "type": "string"
        },
        "mergeFailureType": {
          "enum": [
            "none",
            "unknown",
            "caseSensitive",
            "objectTooLarge"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestMergeFailureType"
          }
        },
        "mergeId": {
          "type": "string",
          "format": "uuid"
        },
        "mergeOptions": {
          "$ref": "#/definitions/GitPullRequestMergeOptions"
        },
        "mergeStatus": {
          "enum": [
            "notSet",
            "queued",
            "conflicts",
            "succeeded",
            "rejectedByPolicy",
            "failure"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestAsyncStatus"
          }
        },
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        },
        "remoteUrl": {
          "type": "string"
        },
        "repository": {
          "$ref": "#/definitions/GitRepository"
        },
        "reviewers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityRefWithVote"
          }
        },
        "sourceRefName": {
          "type": "string"
        },
        "status": {
          "enum": [
            "notSet",
            "active",
            "abandoned",
            "completed",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestStatus"
          }
        },
        "supportsIterations": {
          "type": "boolean"
        },
        "targetRefName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "workItemRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        }
      }
    },
    "GitPullRequestChange": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitChange"
        }
      ],
      "properties": {
        "changeTrackingId": {
          "description": "Id used to track files through multiple changes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GitPullRequestCommentThread": {
      "description": "Represents a given user or system Pull Request comment thread",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CommentThread"
        }
      ],
      "properties": {
        "pullRequestThreadContext": {
          "description": "Extended context information unique to pull requests",
          "$ref": "#/definitions/GitPullRequestCommentThreadContext"
        }
      }
    },
    "GitPullRequestCommentThreadContext": {
      "description": "",
      "type": "object",
      "properties": {
        "changeTrackingId": {
          "description": "Used to track a comment across iterations. This value can be found by looking at the iteration's changes list. Must be set for pull requests with iteration support. Otherwise, it's not required for 'legacy' pull requests.",
          "type": "integer",
          "format": "int32"
        },
        "iterationContext": {
          "description": "Specify comparing iteration Ids when a comment thread is added while comparing 2 iterations.",
          "$ref": "#/definitions/CommentIterationContext"
        },
        "trackingCriteria": {
          "description": "The criteria used to track this thread. If this property is filled out when the thread is returned, then the thread has been tracked from its original location using the given criteria.",
          "$ref": "#/definitions/CommentTrackingCriteria"
        }
      }
    },
    "GitPullRequestCompletionOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "bypassPolicy": {
          "type": "boolean"
        },
        "bypassReason": {
          "type": "string"
        },
        "deleteSourceBranch": {
          "type": "boolean"
        },
        "mergeCommitMessage": {
          "type": "string"
        },
        "squashMerge": {
          "type": "boolean"
        },
        "transitionWorkItems": {
          "type": "boolean"
        }
      }
    },
    "GitPullRequestIteration": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "$ref": "#/definitions/IdentityRef"
        },
        "changeList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitPullRequestChange"
          }
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitCommitRef"
          }
        },
        "commonRefCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "hasMoreCommits": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "push": {
          "$ref": "#/definitions/GitPushRef"
        },
        "reason": {
          "enum": [
            "push",
            "forcePush",
            "create",
            "rebase",
            "unknown"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.IterationReason"
          }
        },
        "sourceRefCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "targetRefCommit": {
          "$ref": "#/definitions/GitCommitRef"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GitPullRequestIterationChanges": {
      "description": "",
      "type": "object",
      "properties": {
        "changeEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitPullRequestChange"
          }
        },
        "nextSkip": {
          "type": "integer",
          "format": "int32"
        },
        "nextTop": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GitPullRequestMergeOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "disableRenames": {
          "type": "boolean"
        }
      }
    },
    "GitPullRequestQuery": {
      "description": "A pull request query",
      "type": "object",
      "properties": {
        "queries": {
          "description": "The query to perform",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitPullRequestQueryInput"
          }
        },
        "results": {
          "description": "The results of the query",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GitPullRequestQueryInput": {
      "description": "The input required for a pull request query. Currently there is only one query: LastMergeCommit, which returns all pull requests whose LastMergeCommit is in the list of CommitIds.",
      "type": "object",
      "properties": {
        "items": {
          "description": "The list commit ids to search for.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "The type of query to perform",
          "enum": [
            "notSet",
            "lastMergeCommit",
            "commit"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQueryType"
          }
        }
      }
    },
    "GitPullRequestReviewFileContentInfo": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "path": {
          "description": "The file change path.",
          "type": "string"
        },
        "sHA1Hash": {
          "description": "Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function. Ensure that uploaded file has same encoding as in source control.",
          "type": "string"
        }
      }
    },
    "GitPullRequestSearchCriteria": {
      "description": "",
      "type": "object",
      "properties": {
        "creatorId": {
          "type": "string",
          "format": "uuid"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        },
        "reviewerId": {
          "type": "string",
          "format": "uuid"
        },
        "sourceRefName": {
          "type": "string"
        },
        "sourceRepositoryId": {
          "type": "string",
          "format": "uuid"
        },
        "status": {
          "enum": [
            "notSet",
            "active",
            "abandoned",
            "completed",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestStatus"
          }
        },
        "targetRefName": {
          "type": "string"
        }
      }
    },
    "GitPullRequestStatus": {
      "description": "This class contains the metadata of a service/extension posting pull request status. Status can be associated with a pull request or an iteration.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitStatus"
        }
      ],
      "properties": {
        "iterationId": {
          "description": "ID of the iteration to associate status with. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "description": "Custom properties of the status.",
          "$ref": "#/definitions/PropertiesCollection"
        }
      }
    },
    "GitPush": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitPushRef"
        }
      ],
      "properties": {
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitCommitRef"
          }
        },
        "refUpdates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitRefUpdate"
          }
        },
        "repository": {
          "$ref": "#/definitions/GitRepository"
        }
      }
    },
    "GitPushEventData": {
      "description": "",
      "type": "object",
      "properties": {
        "afterId": {
          "type": "string"
        },
        "beforeId": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitCommit"
          }
        },
        "repository": {
          "$ref": "#/definitions/GitRepository"
        }
      }
    },
    "GitPushRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "pushCorrelationId": {
          "type": "string",
          "format": "uuid"
        },
        "pushedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "pushId": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitPushSearchCriteria": {
      "description": "",
      "type": "object",
      "properties": {
        "fromDate": {
          "type": "string",
          "format": "date-time"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "includeRefUpdates": {
          "type": "boolean"
        },
        "pusherId": {
          "type": "string",
          "format": "uuid"
        },
        "refName": {
          "type": "string"
        },
        "toDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GitQueryBranchStatsCriteria": {
      "description": "",
      "type": "object",
      "properties": {
        "baseCommit": {
          "$ref": "#/definitions/GitVersionDescriptor"
        },
        "targetCommits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitVersionDescriptor"
          }
        }
      }
    },
    "GitQueryCommitsCriteria": {
      "description": "",
      "type": "object",
      "properties": {
        "$skip": {
          "description": "Number of entries to skip",
          "type": "integer",
          "format": "int32"
        },
        "$top": {
          "description": "Maximum number of entries to retrieve",
          "type": "integer",
          "format": "int32"
        },
        "author": {
          "description": "Alias or display name of the author",
          "type": "string"
        },
        "compareVersion": {
          "description": "If provided, the earliest commit in the graph to search",
          "$ref": "#/definitions/GitVersionDescriptor"
        },
        "excludeDeletes": {
          "description": "If true, don't include delete history entries",
          "type": "boolean"
        },
        "fromCommitId": {
          "description": "If provided, a lower bound for filtering commits alphabetically",
          "type": "string"
        },
        "fromDate": {
          "description": "If provided, only include history entries created after this date (string)",
          "type": "string"
        },
        "historyMode": {
          "description": "What Git history mode should be used. This only applies to the search criteria when Ids = null.",
          "enum": [
            "simplifiedHistory",
            "firstParent",
            "fullHistory",
            "fullHistorySimplifyMerges"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitHistoryMode"
          }
        },
        "ids": {
          "description": "If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "includeWorkItems": {
          "description": "Whether to include linked work items",
          "type": "boolean"
        },
        "itemPath": {
          "description": "Path of item to search under",
          "type": "string"
        },
        "itemVersion": {
          "description": "If provided, identifies the commit or branch to search",
          "$ref": "#/definitions/GitVersionDescriptor"
        },
        "toCommitId": {
          "description": "If provided, an upper bound for filtering commits alphabetically",
          "type": "string"
        },
        "toDate": {
          "description": "If provided, only include history entries created before this date (string)",
          "type": "string"
        },
        "user": {
          "description": "Alias or display name of the committer",
          "type": "string"
        }
      }
    },
    "GitQueryRefsCriteria": {
      "description": "",
      "type": "object",
      "properties": {
        "commitIds": {
          "description": "List of commit Ids to be searched",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "refNames": {
          "description": "List of complete or partial names for refs to be searched",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "searchType": {
          "description": "Type of search on refNames, if provided",
          "enum": [
            "exact",
            "startsWith",
            "contains"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitRefSearchType"
          }
        }
      }
    },
    "GitRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "isLocked": {
          "type": "boolean"
        },
        "isLockedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "name": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "peeledObjectId": {
          "type": "string"
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitStatus"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitRefFavorite": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "identityId": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "enum": [
            "invalid",
            "folder",
            "ref"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.RefFavoriteType"
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitRefUpdate": {
      "description": "",
      "type": "object",
      "properties": {
        "isLocked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "newObjectId": {
          "type": "string"
        },
        "oldObjectId": {
          "type": "string"
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "GitRefUpdateResult": {
      "description": "",
      "type": "object",
      "properties": {
        "customMessage": {
          "description": "Custom message for the result object For instance, Reason for failing.",
          "type": "string"
        },
        "isLocked": {
          "description": "Whether the ref is locked or not",
          "type": "boolean"
        },
        "name": {
          "description": "Ref name",
          "type": "string"
        },
        "newObjectId": {
          "description": "New object ID",
          "type": "string"
        },
        "oldObjectId": {
          "description": "Old object ID",
          "type": "string"
        },
        "rejectedBy": {
          "description": "Name of the plugin that rejected the updated.",
          "type": "string"
        },
        "repositoryId": {
          "description": "Repository ID",
          "type": "string",
          "format": "uuid"
        },
        "success": {
          "description": "True if the ref update succeeded, false otherwise",
          "type": "boolean"
        },
        "updateStatus": {
          "description": "Status of the update from the TFS server.",
          "enum": [
            "succeeded",
            "forcePushRequired",
            "staleOldObjectId",
            "invalidRefName",
            "unprocessed",
            "unresolvableToCommit",
            "writePermissionRequired",
            "manageNotePermissionRequired",
            "createBranchPermissionRequired",
            "createTagPermissionRequired",
            "rejectedByPlugin",
            "locked",
            "refNameConflict",
            "rejectedByPolicy",
            "succeededNonExistentRef",
            "succeededCorruptRef"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateStatus"
          }
        }
      }
    },
    "GitRepository": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "defaultBranch": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "isFork": {
          "description": "True if the repository was created as a fork",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "parentRepository": {
          "$ref": "#/definitions/GitRepositoryRef"
        },
        "project": {
          "$ref": "#/definitions/TeamProjectReference"
        },
        "remoteUrl": {
          "type": "string"
        },
        "sshUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "validRemoteUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GitRepositoryCreateOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "parentRepository": {
          "$ref": "#/definitions/GitRepositoryRef"
        },
        "project": {
          "$ref": "#/definitions/TeamProjectReference"
        }
      }
    },
    "GitRepositoryRef": {
      "description": "",
      "type": "object",
      "properties": {
        "collection": {
          "description": "Team Project Collection where this Fork resides",
          "$ref": "#/definitions/TeamProjectCollectionReference"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/TeamProjectReference"
        },
        "remoteUrl": {
          "type": "string"
        },
        "sshUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitRepositoryStats": {
      "description": "",
      "type": "object",
      "properties": {
        "activePullRequestsCount": {
          "type": "integer",
          "format": "int32"
        },
        "branchesCount": {
          "type": "integer",
          "format": "int32"
        },
        "commitsCount": {
          "type": "integer",
          "format": "int32"
        },
        "repositoryId": {
          "type": "string"
        }
      }
    },
    "GitResolution": {
      "description": "",
      "type": "object",
      "properties": {}
    },
    "GitResolutionMergeContent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitResolution"
        }
      ],
      "properties": {
        "mergeType": {
          "enum": [
            "undecided",
            "takeSourceContent",
            "takeTargetContent",
            "autoMerged",
            "userMerged"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionMergeType"
          }
        },
        "userMergedBlob": {
          "$ref": "#/definitions/GitBlobRef"
        },
        "userMergedContent": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "GitResolutionPathConflict": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitResolution"
        }
      ],
      "properties": {
        "action": {
          "enum": [
            "undecided",
            "keepSourceRenameTarget",
            "keepSourceDeleteTarget",
            "keepTargetRenameSource",
            "keepTargetDeleteSource"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionPathConflictAction"
          }
        },
        "renamePath": {
          "type": "string"
        }
      }
    },
    "GitResolutionPickOneAction": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitResolution"
        }
      ],
      "properties": {
        "action": {
          "enum": [
            "undecided",
            "pickSourceAction",
            "pickTargetAction"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionWhichAction"
          }
        }
      }
    },
    "GitResolutionRename1to2": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitResolutionMergeContent"
        }
      ],
      "properties": {
        "action": {
          "enum": [
            "undecided",
            "keepSourcePath",
            "keepTargetPath",
            "keepBothFiles"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionRename1to2Action"
          }
        }
      }
    },
    "GitRevert": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitAsyncRefOperation"
        }
      ],
      "properties": {
        "revertId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GitStatus": {
      "description": "This class contains the metadata of a service/extension posting a status.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference links.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "context": {
          "description": "Context of the status.",
          "$ref": "#/definitions/GitStatusContext"
        },
        "createdBy": {
          "description": "Identity that created the status.",
          "$ref": "#/definitions/IdentityRef"
        },
        "creationDate": {
          "description": "Creation date and time of the status.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Status description. Typically describes current state of the status.",
          "type": "string"
        },
        "id": {
          "description": "Status identifier.",
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "description": "State of the status.",
          "enum": [
            "notSet",
            "pending",
            "succeeded",
            "failed",
            "error"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitStatusState"
          }
        },
        "targetUrl": {
          "description": "URL with status details.",
          "type": "string"
        },
        "updatedDate": {
          "description": "Last update date and time of the status.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "GitStatusContext": {
      "description": "Status context that uniquely identifies the status.",
      "type": "object",
      "properties": {
        "genre": {
          "description": "Genre of the status. Typically name of the service/tool generating the status, can be empty.",
          "type": "string"
        },
        "name": {
          "description": "Name identifier of the status, cannot be null or empty.",
          "type": "string"
        }
      }
    },
    "GitSuggestion": {
      "description": "",
      "type": "object",
      "properties": {
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "GitTargetVersionDescriptor": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitVersionDescriptor"
        }
      ],
      "properties": {
        "targetVersion": {
          "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
          "type": "string"
        },
        "targetVersionOptions": {
          "description": "Version options - Specify additional modifiers to version (e.g Previous)",
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "targetVersionType": {
          "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
          "enum": [
            "branch",
            "tag",
            "commit"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "GitTemplate": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Template",
          "type": "string"
        },
        "type": {
          "description": "Type of the Template",
          "type": "string"
        }
      }
    },
    "GitTreeDiff": {
      "description": "",
      "type": "object",
      "properties": {
        "baseTreeId": {
          "description": "ObjectId of the base tree of this diff.",
          "type": "string"
        },
        "diffEntries": {
          "description": "List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yeild more diff entries. If the continuation token is not returned all the diff entries have been included in this response.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitTreeDiffEntry"
          }
        },
        "targetTreeId": {
          "description": "ObjectId of the target tree of this diff.",
          "type": "string"
        },
        "url": {
          "description": "REST Url to this resource.",
          "type": "string"
        }
      }
    },
    "GitTreeDiffEntry": {
      "description": "",
      "type": "object",
      "properties": {
        "baseObjectId": {
          "description": "SHA1 hash of the object in the base tree, if it exists. Will be null in case of adds.",
          "type": "string"
        },
        "changeType": {
          "description": "Type of change that affected this entry.",
          "enum": [
            "none",
            "add",
            "edit",
            "encoding",
            "rename",
            "delete",
            "undelete",
            "branch",
            "merge",
            "lock",
            "rollback",
            "sourceRename",
            "targetRename",
            "property",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlChangeType"
          }
        },
        "objectType": {
          "description": "Object type of the tree entry. Blob, Tree or Commit(\"submodule\")",
          "enum": [
            "bad",
            "commit",
            "tree",
            "blob",
            "tag",
            "ext2",
            "ofsDelta",
            "refDelta"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType"
          }
        },
        "path": {
          "description": "Relative path in base and target trees.",
          "type": "string"
        },
        "targetObjectId": {
          "description": "SHA1 hash of the object in the target tree, if it exists. Will be null in case of deletes.",
          "type": "string"
        }
      }
    },
    "GitTreeDiffResponse": {
      "description": "",
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "The HTTP client methods find the continuation token header in the response and populate this field.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "treeDiff": {
          "$ref": "#/definitions/GitTreeDiff"
        }
      }
    },
    "GitTreeEntryRef": {
      "description": "",
      "type": "object",
      "properties": {
        "gitObjectType": {
          "description": "Blob or tree",
          "enum": [
            "bad",
            "commit",
            "tree",
            "blob",
            "tag",
            "ext2",
            "ofsDelta",
            "refDelta"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType"
          }
        },
        "mode": {
          "description": "Mode represented as octal string",
          "type": "string"
        },
        "objectId": {
          "description": "SHA1 hash of git object",
          "type": "string"
        },
        "relativePath": {
          "description": "Path relative to parent tree object",
          "type": "string"
        },
        "size": {
          "description": "Size of content",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "description": "url to retrieve tree or blob",
          "type": "string"
        }
      }
    },
    "GitTreeRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "objectId": {
          "description": "SHA1 hash of git object",
          "type": "string"
        },
        "size": {
          "description": "Sum of sizes of all children",
          "type": "integer",
          "format": "int64"
        },
        "treeEntries": {
          "description": "Blobs and trees under this tree",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitTreeEntryRef"
          }
        },
        "url": {
          "description": "Url to tree",
          "type": "string"
        }
      }
    },
    "GitUserDate": {
      "description": "",
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "GitVersionDescriptor": {
      "description": "",
      "type": "object",
      "properties": {
        "version": {
          "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
          "type": "string"
        },
        "versionOptions": {
          "description": "Version options - Specify additional modifiers to version (e.g Previous)",
          "enum": [
            "none",
            "previousChange",
            "firstParent"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions"
          }
        },
        "versionType": {
          "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
          "enum": [
            "branch",
            "tag",
            "commit"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType"
          }
        }
      }
    },
    "GlobalGitRepositoryKey": {
      "description": "Globally unique key for a repository.",
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "string",
          "format": "uuid"
        },
        "projectId": {
          "type": "string",
          "format": "uuid"
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "HistoryEntry": {
      "description": "",
      "type": "object",
      "properties": {
        "changeList": {
          "description": "The Change list (changeset/commit/shelveset) for this point in history",
          "type": "string",
          "format": "ChangeList"
        },
        "itemChangeType": {
          "description": "The change made to the item from this change list (only relevant for File history, not folders)",
          "enum": [
            "none",
            "add",
            "edit",
            "encoding",
            "rename",
            "delete",
            "undelete",
            "branch",
            "merge",
            "lock",
            "rollback",
            "sourceRename",
            "targetRename",
            "property",
            "all"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlChangeType"
          }
        },
        "serverItem": {
          "description": "The path of the item at this point in history (only relevant for File history, not folders)",
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "properties": {
        "directoryAlias": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "IdentityRefWithVote": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/IdentityRef"
        }
      ],
      "properties": {
        "isRequired": {
          "type": "boolean"
        },
        "reviewerUrl": {
          "type": "string"
        },
        "vote": {
          "type": "integer",
          "format": "int16"
        },
        "votedFor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityRefWithVote"
          }
        }
      }
    },
    "ImportRepositoryValidation": {
      "description": "",
      "type": "object",
      "properties": {
        "gitSource": {
          "$ref": "#/definitions/GitImportGitSource"
        },
        "password": {
          "type": "string"
        },
        "tfvcSource": {
          "$ref": "#/definitions/GitImportTfvcSource"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "IncludedGitCommit": {
      "description": "",
      "type": "object",
      "properties": {
        "commitId": {
          "type": "string"
        },
        "commitTime": {
          "type": "string",
          "format": "date-time"
        },
        "parentCommitIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "repositoryId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ItemContent": {
      "description": "",
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "enum": [
            "rawText",
            "base64Encoded"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.ItemContentType"
          }
        }
      }
    },
    "ItemDetailsOptions": {
      "description": "Optional details to include when returning an item model",
      "type": "object",
      "properties": {
        "includeContentMetadata": {
          "description": "If true, include metadata about the file type",
          "type": "boolean"
        },
        "recursionLevel": {
          "description": "Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items",
          "enum": [
            "none",
            "oneLevel",
            "oneLevelPlusNestedEmptyFolders",
            "full"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType"
          }
        }
      }
    },
    "ItemModel": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "contentMetadata": {
          "$ref": "#/definitions/FileContentMetadata"
        },
        "isFolder": {
          "type": "boolean"
        },
        "isSymLink": {
          "type": "boolean"
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "JsonPatchDocument": {
      "description": "The JSON model for JSON Patch Operations",
      "type": "object",
      "allOf": [
        {
          "type": "array",
          "items": {}
        }
      ],
      "properties": {}
    },
    "JsonPatchOperation": {
      "description": "The JSON model for a JSON Patch operation",
      "type": "object",
      "properties": {
        "from": {
          "description": "The path to copy from for the Move/Copy operation.",
          "type": "string"
        },
        "op": {
          "description": "The patch operation",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ],
          "x-ms-enum": {
            "name": "Microsoft.VisualStudio.Services.WebApi.Patch.Operation"
          }
        },
        "path": {
          "description": "The path for the operation",
          "type": "string"
        },
        "value": {
          "description": "The value for the operation. This is either a primitive or a JToken.",
          "type": "object"
        }
      }
    },
    "PropertiesCollection": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of properties in the collection.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "description": "The set of keys in the collection.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "description": "The set of values in the collection.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PullRequestTabExtensionConfig": {
      "description": "Initial config contract sent to extensions creating tabs on the pull request page",
      "type": "object",
      "properties": {
        "pullRequestId": {
          "type": "integer",
          "format": "int32"
        },
        "repositoryId": {
          "type": "string"
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.  Example: `{ self: { href: \"http://localhost:8080/tfs/DefaultCollection/_apis/wit/workItems/1\" } }`",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "readOnly": true,
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResourceRef": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ShareNotificationContext": {
      "description": "Context used while sharing a pull request.",
      "type": "object",
      "properties": {
        "message": {
          "description": "Optional user note or message.",
          "type": "string"
        },
        "receivers": {
          "description": "Identities of users who will receive a share notification.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityRef"
          }
        }
      }
    },
    "SourceToTargetRef": {
      "description": "",
      "type": "object",
      "properties": {
        "sourceRef": {
          "description": "The source ref to copy. For example, refs/heads/master.",
          "type": "string"
        },
        "targetRef": {
          "description": "The target ref to update. For example, refs/heads/master",
          "type": "string"
        }
      }
    },
    "SupportedIde": {
      "description": "Represents a Supported IDE entity.",
      "type": "object",
      "properties": {
        "downloadUrl": {
          "description": "The download URL for the IDE.",
          "type": "string"
        },
        "ideType": {
          "description": "The type of the IDE.",
          "enum": [
            "unknown",
            "androidStudio",
            "appCode",
            "cLion",
            "dataGrip",
            "eclipse",
            "intelliJ",
            "mPS",
            "phpStorm",
            "pyCharm",
            "rubyMine",
            "tower",
            "visualStudio",
            "webStorm"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.SupportedIdeType"
          }
        },
        "name": {
          "description": "The name of the IDE.",
          "type": "string"
        },
        "protocolHandlerUrl": {
          "description": "The URL to open the protocol handler for the IDE.",
          "type": "string"
        },
        "supportedPlatforms": {
          "description": "A list of SupportedPlatforms.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TeamProjectCollectionReference": {
      "description": "Reference object for a TeamProjectCollection.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Collection Id.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Collection Name.",
          "type": "string"
        },
        "url": {
          "description": "Collection REST Url.",
          "type": "string"
        }
      }
    },
    "TeamProjectReference": {
      "description": "Represents a shallow reference to a TeamProject.",
      "type": "object",
      "properties": {
        "abbreviation": {
          "description": "Project abbreviation.",
          "type": "string"
        },
        "description": {
          "description": "The project's description (if any).",
          "type": "string"
        },
        "id": {
          "description": "Project identifier.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Project name.",
          "type": "string"
        },
        "revision": {
          "description": "Project revision.",
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "description": "Project state.",
          "enum": [
            "deleting",
            "new",
            "wellFormed",
            "createPending",
            "all",
            "unchanged",
            "deleted"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.ProjectState"
          }
        },
        "url": {
          "description": "Url to the full version of the object.",
          "type": "string"
        },
        "visibility": {
          "description": "Project visibility.",
          "enum": [
            "unchanged",
            "private",
            "organization",
            "public"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.ProjectVisibility"
          }
        }
      }
    },
    "TfvcBranch": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TfvcBranchRef"
        }
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcBranch"
          }
        },
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcBranchMapping"
          }
        },
        "parent": {
          "$ref": "#/definitions/TfvcShallowBranchRef"
        },
        "relatedBranches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcShallowBranchRef"
          }
        }
      }
    },
    "TfvcBranchMapping": {
      "description": "",
      "type": "object",
      "properties": {
        "depth": {
          "type": "string"
        },
        "serverItem": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "TfvcBranchRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TfvcShallowBranchRef"
        }
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "owner": {
          "$ref": "#/definitions/IdentityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "TfvcChange": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "Change"
        }
      ],
      "properties": {
        "mergeSources": {
          "description": "List of merge sources in case of rename or branch creation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcMergeSource"
          }
        },
        "pendingVersion": {
          "description": "Version at which a (shelved) change was pended against",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TfvcChangeset": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TfvcChangesetRef"
        }
      ],
      "properties": {
        "accountId": {
          "type": "string",
          "format": "uuid"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcChange"
          }
        },
        "checkinNotes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckinNote"
          }
        },
        "collectionId": {
          "type": "string",
          "format": "uuid"
        },
        "hasMoreChanges": {
          "type": "boolean"
        },
        "policyOverride": {
          "$ref": "#/definitions/TfvcPolicyOverrideInfo"
        },
        "teamProjectIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "workItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssociatedWorkItem"
          }
        }
      }
    },
    "TfvcChangesetRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "$ref": "#/definitions/IdentityRef"
        },
        "changesetId": {
          "type": "integer",
          "format": "int32"
        },
        "checkedInBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "TfvcChangesetSearchCriteria": {
      "description": "Criteria used in a search for change lists",
      "type": "object",
      "properties": {
        "author": {
          "description": "Alias or display name of user who made the changes",
          "type": "string"
        },
        "followRenames": {
          "description": "Whether or not to follow renames for the given item being queried",
          "type": "boolean"
        },
        "fromDate": {
          "description": "If provided, only include changesets created after this date (string) Think of a better name for this.",
          "type": "string"
        },
        "fromId": {
          "description": "If provided, only include changesets after this changesetID",
          "type": "integer",
          "format": "int32"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemPath": {
          "description": "Path of item to search under",
          "type": "string"
        },
        "toDate": {
          "description": "If provided, only include changesets created before this date (string) Think of a better name for this.",
          "type": "string"
        },
        "toId": {
          "description": "If provided, a version descriptor for the latest change list to include",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TfvcChangesetsRequestData": {
      "description": "",
      "type": "object",
      "properties": {
        "changesetIds": {
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "commentLength": {
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        }
      }
    },
    "TfvcCheckinEventData": {
      "description": "",
      "type": "object",
      "properties": {
        "changeset": {
          "$ref": "#/definitions/TfvcChangeset"
        },
        "project": {
          "$ref": "#/definitions/TeamProjectReference"
        }
      }
    },
    "TfvcHistoryEntry": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "type": "string",
          "format": "HistoryEntry"
        }
      ],
      "properties": {
        "encoding": {
          "description": "The encoding of the item at this point in history (only relevant for File history, not folders)",
          "type": "integer",
          "format": "int32"
        },
        "fileId": {
          "description": "The file id of the item at this point in history (only relevant for File history, not folders)",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TfvcItem": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ItemModel"
        }
      ],
      "properties": {
        "changeDate": {
          "type": "string",
          "format": "date-time"
        },
        "deletionId": {
          "type": "integer",
          "format": "int32"
        },
        "hashValue": {
          "description": "MD5 hash as a base 64 string, applies to files only.",
          "type": "string"
        },
        "isBranch": {
          "type": "boolean"
        },
        "isPendingChange": {
          "type": "boolean"
        },
        "size": {
          "description": "The size of the file, if applicable.",
          "type": "integer",
          "format": "int64"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TfvcItemDescriptor": {
      "description": "Item path and Version descriptor properties",
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "recursionLevel": {
          "enum": [
            "none",
            "oneLevel",
            "oneLevelPlusNestedEmptyFolders",
            "full"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType"
          }
        },
        "version": {
          "type": "string"
        },
        "versionOption": {
          "enum": [
            "none",
            "previous",
            "useRename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionOption"
          }
        },
        "versionType": {
          "enum": [
            "none",
            "changeset",
            "shelveset",
            "change",
            "date",
            "latest",
            "tip",
            "mergeSource"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionType"
          }
        }
      }
    },
    "TfvcItemRequestData": {
      "description": "",
      "type": "object",
      "properties": {
        "includeContentMetadata": {
          "description": "If true, include metadata about the file type",
          "type": "boolean"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcItemDescriptor"
          }
        }
      }
    },
    "TfvcLabel": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TfvcLabelRef"
        }
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcItem"
          }
        }
      }
    },
    "TfvcLabelRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "labelScope": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/IdentityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "TfvcLabelRequestData": {
      "description": "",
      "type": "object",
      "properties": {
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references",
          "type": "boolean"
        },
        "itemLabelFilter": {
          "type": "string"
        },
        "labelScope": {
          "type": "string"
        },
        "maxItemCount": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "TfvcMergeSource": {
      "description": "",
      "type": "object",
      "properties": {
        "isRename": {
          "description": "Indicates if this a rename source. If false, it is a merge source.",
          "type": "boolean"
        },
        "serverItem": {
          "description": "The server item of the merge source",
          "type": "string"
        },
        "versionFrom": {
          "description": "Start of the version range",
          "type": "integer",
          "format": "int32"
        },
        "versionTo": {
          "description": "End of the version range",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TfvcPolicyFailureInfo": {
      "description": "",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "TfvcPolicyOverrideInfo": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "policyFailures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcPolicyFailureInfo"
          }
        }
      }
    },
    "TfvcShallowBranchRef": {
      "description": "",
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "TfvcShelveset": {
      "description": "This is the deep shelveset class",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TfvcShelvesetRef"
        }
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TfvcChange"
          }
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckinNote"
          }
        },
        "policyOverride": {
          "$ref": "#/definitions/TfvcPolicyOverrideInfo"
        },
        "workItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssociatedWorkItem"
          }
        }
      }
    },
    "TfvcShelvesetRef": {
      "description": "This is the shallow shelveset class",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "comment": {
          "type": "string"
        },
        "commentTruncated": {
          "type": "boolean"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/IdentityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "TfvcShelvesetRequestData": {
      "description": "",
      "type": "object",
      "properties": {
        "includeDetails": {
          "description": "Whether to include policyOverride and notes Only applies when requesting a single deep shelveset",
          "type": "boolean"
        },
        "includeLinks": {
          "description": "Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.",
          "type": "boolean"
        },
        "includeWorkItems": {
          "description": "Whether to include workItems",
          "type": "boolean"
        },
        "maxChangeCount": {
          "description": "Max number of changes to include",
          "type": "integer",
          "format": "int32"
        },
        "maxCommentLength": {
          "description": "Max length of comment",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Shelveset's name",
          "type": "string"
        },
        "owner": {
          "description": "Owner's ID. Could be a name or a guid.",
          "type": "string"
        }
      }
    },
    "TfvcVersionDescriptor": {
      "description": "",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "versionOption": {
          "enum": [
            "none",
            "previous",
            "useRename"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionOption"
          }
        },
        "versionType": {
          "enum": [
            "none",
            "changeset",
            "shelveset",
            "change",
            "date",
            "latest",
            "tip",
            "mergeSource"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionType"
          }
        }
      }
    },
    "UpdateRefsRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "refUpdateRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitRefUpdate"
          }
        },
        "updateMode": {
          "enum": [
            "bestEffort",
            "allOrNone"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateMode"
          }
        }
      }
    },
    "VersionControlProjectInfo": {
      "description": "",
      "type": "object",
      "properties": {
        "defaultSourceControlType": {
          "enum": [
            "tfvc",
            "git"
          ],
          "x-ms-enum": {
            "name": "Microsoft.TeamFoundation.Core.WebApi.SourceControlTypes"
          }
        },
        "project": {
          "$ref": "#/definitions/TeamProjectReference"
        },
        "supportsGit": {
          "type": "boolean"
        },
        "supportsTFVC": {
          "type": "boolean"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "readOnly": true,
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WebApiCreateTagRequestData": {
      "description": "The representation of data needed to create a tag definition which is sent across the wire.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the tag definition that will be created.",
          "type": "string"
        }
      }
    },
    "WebApiTagDefinition": {
      "description": "The representation of a tag definition which is sent across the wire.",
      "type": "object",
      "properties": {
        "active": {
          "description": "Whether or not the tag definition is active.",
          "type": "boolean"
        },
        "id": {
          "description": "ID of the tag definition.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The name of the tag definition.",
          "type": "string"
        },
        "url": {
          "description": "Resource URL for the Tag Definition.",
          "type": "string"
        }
      }
    },
    "POST_git_pullRequestStatuses_iterationStatus": {
      "parameters": {
        "body": {
          "state": "succeeded",
          "description": "Sample status succeeded",
          "context": {
            "name": "sample-status-4",
            "genre": "vsts-samples"
          },
          "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1"
        }
      },
      "responses": {
        "200": {
          "body": {
            "iterationId": 1,
            "id": 1,
            "state": "succeeded",
            "description": "Sample status succeeded",
            "context": {
              "name": "sample-status-4",
              "genre": "vsts-samples"
            },
            "creationDate": "2017-08-04T20:38:12.2198778Z",
            "updatedDate": "2017-08-04T20:38:12.2198778Z",
            "createdBy": {
              "id": "2751826f-19f8-451d-989b-50636015b163",
              "displayName": "Normal Paulk",
              "uniqueName": "fabrikamfiber16@hotmail.com",
              "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
              "imageUrl": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
            },
            "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1",
            "_links": {
              "self": {
                "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/25/iterations/1/statuses/1"
              },
              "repository": {
                "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2"
              }
            }
          }
        }
      },
      "x-ms-vss-migrated": true
    },
    "GET_git_pullRequestStatuses_iterationStatuses": {
      "parameters": {},
      "responses": {
        "200": {
          "body": {
            "value": [
              {
                "iterationId": 1,
                "id": 1,
                "state": "succeeded",
                "description": "Sample status succeeded",
                "context": {
                  "name": "sample-status-1",
                  "genre": "vsts-samples"
                },
                "creationDate": "2017-08-04T20:38:12.5179507Z",
                "updatedDate": "2017-08-04T20:38:12.5179507Z",
                "createdBy": {
                  "id": "2751826f-19f8-451d-989b-50636015b163",
                  "displayName": "Normal Paulk",
                  "uniqueName": "fabrikamfiber16@hotmail.com",
                  "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
                  "imageUrl": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
                },
                "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1"
              },
              {
                "iterationId": 1,
                "id": 2,
                "state": "succeeded",
                "description": "Sample status succeeded",
                "context": {
                  "name": "sample-status-4",
                  "genre": "vsts-samples"
                },
                "creationDate": "2017-08-04T20:38:12.5419507Z",
                "updatedDate": "2017-08-04T20:38:12.5419507Z",
                "createdBy": {
                  "id": "2751826f-19f8-451d-989b-50636015b163",
                  "displayName": "Normal Paulk",
                  "uniqueName": "fabrikamfiber16@hotmail.com",
                  "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
                  "imageUrl": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
                },
                "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1"
              }
            ],
            "count": 2
          }
        }
      },
      "x-ms-vss-migrated": true
    },
    "GET_git_pullRequestStatuses_iterationStatus": {
      "parameters": {},
      "responses": {
        "200": {
          "body": {
            "iterationId": 1,
            "id": 1,
            "state": "succeeded",
            "description": "Sample status succeeded",
            "context": {
              "name": "sample-status-4",
              "genre": "vsts-samples"
            },
            "creationDate": "2017-08-04T20:38:13.7605333Z",
            "updatedDate": "2017-08-04T20:38:13.7605333Z",
            "createdBy": {
              "id": "2751826f-19f8-451d-989b-50636015b163",
              "displayName": "Normal Paulk",
              "uniqueName": "fabrikamfiber16@hotmail.com",
              "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
              "imageUrl": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
            },
            "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1",
            "_links": {
              "self": {
                "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/29/iterations/1/statuses/1"
              },
              "repository": {
                "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2"
              }
            }
          }
        }
      },
      "x-ms-vss-migrated": true
    },
    "POST_git_pullRequestStatuses_status": {
      "parameters": {
        "body": {
          "state": "succeeded",
          "description": "Sample status succeeded",
          "context": {
            "name": "sample-status-4",
            "genre": "vsts-samples"
          },
          "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1"
        }
      },
      "responses": {
        "200": {
          "body": {
            "id": 1,
            "state": "succeeded",
            "description": "Sample status succeeded",
            "context": {
              "name": "sample-status-4",
              "genre": "vsts-samples"
            },
            "creationDate": "2017-08-04T20:38:11.2076563Z",
            "updatedDate": "2017-08-04T20:38:11.2076563Z",
            "createdBy": {
              "id": "2751826f-19f8-451d-989b-50636015b163",
              "displayName": "Normal Paulk",
              "uniqueName": "fabrikamfiber16@hotmail.com",
              "url": "https://fabrikam.visualstudio.com/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
              "imageUrl": "https://fabrikam.visualstudio.com/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
            },
            "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1",
            "_links": {
              "self": {
                "href": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/23/statuses/1"
              },
              "repository": {
                "href": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2"
              }
            }
          }
        }
      },
      "x-ms-vss-migrated": true,
      "x-ms-vss-example-request": {
        "url": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/23/statuses"
      }
    },
    "POST_git_pullRequestStatuses_statusIterationInBody": {
      "parameters": {
        "body": {
          "iterationId": 1,
          "state": "succeeded",
          "description": "Sample status succeeded",
          "context": {
            "name": "sample-status-1",
            "genre": "vsts-samples"
          },
          "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1"
        }
      },
      "responses": {
        "200": {
          "body": {
            "iterationId": 1,
            "id": 1,
            "state": "succeeded",
            "description": "Sample status succeeded",
            "context": {
              "name": "sample-status-1",
              "genre": "vsts-samples"
            },
            "creationDate": "2017-08-04T20:38:11.8979627Z",
            "updatedDate": "2017-08-04T20:38:11.8979627Z",
            "createdBy": {
              "id": "2751826f-19f8-451d-989b-50636015b163",
              "displayName": "Normal Paulk",
              "uniqueName": "fabrikamfiber16@hotmail.com",
              "url": "https://fabrikam.visualstudio.com/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
              "imageUrl": "https://fabrikam.visualstudio.com/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
            },
            "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1",
            "_links": {
              "self": {
                "href": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/24/statuses/1"
              },
              "repository": {
                "href": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2"
              }
            }
          }
        }
      },
      "x-ms-vss-migrated": true,
      "x-ms-vss-example-request": {
        "url": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/24/statuses"
      }
    },
    "GET_git_pullRequestStatuses_statuses": {
      "parameters": {},
      "responses": {
        "200": {
          "body": {
            "value": [
              {
                "id": 1,
                "state": "succeeded",
                "description": "Sample status succeeded",
                "context": {
                  "name": "sample-status-3",
                  "genre": "vsts-samples"
                },
                "creationDate": "2017-08-04T20:38:12.9170536Z",
                "updatedDate": "2017-08-04T20:38:12.9170536Z",
                "createdBy": {
                  "id": "2751826f-19f8-451d-989b-50636015b163",
                  "displayName": "Normal Paulk",
                  "uniqueName": "fabrikamfiber16@hotmail.com",
                  "url": "https://fabrikam.visualstudio.com/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
                  "imageUrl": "https://fabrikam.visualstudio.com/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
                },
                "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1"
              },
              {
                "id": 2,
                "state": "succeeded",
                "description": "Sample status succeeded",
                "context": {
                  "name": "sample-status-4",
                  "genre": "vsts-samples"
                },
                "creationDate": "2017-08-04T20:38:12.9530624Z",
                "updatedDate": "2017-08-04T20:38:12.9530624Z",
                "createdBy": {
                  "id": "2751826f-19f8-451d-989b-50636015b163",
                  "displayName": "Normal Paulk",
                  "uniqueName": "fabrikamfiber16@hotmail.com",
                  "url": "https://fabrikam.visualstudio.com/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
                  "imageUrl": "https://fabrikam.visualstudio.com/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
                },
                "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1"
              }
            ],
            "count": 2
          }
        }
      },
      "x-ms-vss-migrated": true,
      "x-ms-vss-example-request": {
        "url": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/27/statuses"
      }
    },
    "GET_git_pullRequestStatuses_status": {
      "parameters": {},
      "responses": {
        "200": {
          "body": {
            "id": 1,
            "state": "succeeded",
            "description": "Sample status succeeded",
            "context": {
              "name": "sample-status-1",
              "genre": "vsts-samples"
            },
            "creationDate": "2017-08-04T20:38:13.4009941Z",
            "updatedDate": "2017-08-04T20:38:13.4009941Z",
            "createdBy": {
              "id": "2751826f-19f8-451d-989b-50636015b163",
              "displayName": "Normal Paulk",
              "uniqueName": "fabrikamfiber16@hotmail.com",
              "url": "https://fabrikam.visualstudio.com/_apis/Identities/2751826f-19f8-451d-989b-50636015b163",
              "imageUrl": "https://fabrikam.visualstudio.com/_api/_common/identityImage?id=2751826f-19f8-451d-989b-50636015b163"
            },
            "targetUrl": "http://fabrikam-fiber-inc.com/CI/builds/1",
            "_links": {
              "self": {
                "href": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/28/statuses/1"
              },
              "repository": {
                "href": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2"
              }
            }
          }
        }
      },
      "x-ms-vss-migrated": true,
      "x-ms-vss-example-request": {
        "url": "https://fabrikam.visualstudio.com/_apis/git/repositories/32851015-38cb-48a7-9858-77857c1e1da2/pullRequests/28/statuses/1"
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '4.1-preview' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.code": "Grants the ability to read source code and metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to get notified about version control events via service hooks.",
        "vso.code_manage": "Grants the ability to read, update, and delete source code, access metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to create and manage code repositories, create and manage pull requests and code reviews, and to receive notifications about version control events via service hooks.",
        "vso.code_write": "Grants the ability to read, update, and delete source code, access metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to create and manage pull requests and code reviews and to receive notifications about version control events via service hooks.",
        "vso.code_status": "Grants the ability to read and write commit and pull request status."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Visual Studio Team Services REST APIs",
    "url": "https://www.visualstudio.com/docs/integrate/api/overview"
  },
  "x-internal-service-name": "Git",
  "x-internal-toc-name": "PullRequestIterationStatuses",
  "x-internal-split-type": "Operation"
}